// <auto-generated />
using System;
using FoodOrderingWebsite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodOrderingWebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231108085609_BaseMigration")]
    partial class BaseMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodOrderingWebsite.Models.Address.AddressObjectModel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("changeid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("isactive")
                        .HasColumnType("integer");

                    b.Property<int>("isactual")
                        .HasColumnType("integer");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("nextid")
                        .HasColumnType("bigint");

                    b.Property<Guid>("objectguid")
                        .HasColumnType("uuid");

                    b.Property<long>("objectid")
                        .HasColumnType("bigint");

                    b.Property<int>("opertypeid")
                        .HasColumnType("integer");

                    b.Property<long>("previd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("typename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("as_addr_obj");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Address.HierarchyModel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("areacode")
                        .HasColumnType("text");

                    b.Property<long>("changeid")
                        .HasColumnType("bigint");

                    b.Property<string>("citycode")
                        .HasColumnType("text");

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("isactive")
                        .HasColumnType("integer");

                    b.Property<long>("nextid")
                        .HasColumnType("bigint");

                    b.Property<long>("objectid")
                        .HasColumnType("bigint");

                    b.Property<long>("parentobjid")
                        .HasColumnType("bigint");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("placecode")
                        .HasColumnType("text");

                    b.Property<string>("plancode")
                        .HasColumnType("text");

                    b.Property<long>("previd")
                        .HasColumnType("bigint");

                    b.Property<string>("regioncode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("streetcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("as_adm_hierarchy");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Address.HouseModel", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("addnum1")
                        .HasColumnType("text");

                    b.Property<string>("addnum2")
                        .HasColumnType("text");

                    b.Property<int?>("addtype1")
                        .HasColumnType("integer");

                    b.Property<int?>("addtype2")
                        .HasColumnType("integer");

                    b.Property<long>("changeid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("housenum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("housetype")
                        .HasColumnType("integer");

                    b.Property<int>("isactive")
                        .HasColumnType("integer");

                    b.Property<int>("isactual")
                        .HasColumnType("integer");

                    b.Property<long>("nextid")
                        .HasColumnType("bigint");

                    b.Property<Guid>("objectguid")
                        .HasColumnType("uuid");

                    b.Property<long>("objectid")
                        .HasColumnType("bigint");

                    b.Property<int>("opertypeid")
                        .HasColumnType("integer");

                    b.Property<long>("previd")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("as_houses");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Basket.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Dish.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dab4e30-0118-41d6-a2c3-4ab9725901f1"),
                            Category = "Wok",
                            Description = "Пшеничная лапша обжаренная на воке с колбасками пепперони, маслинами, сладким перцем и перцем халапеньо в томатном соусе с добавлением петрушки. БЖУ на 100 г. Белки, г — 8,18 Жиры, г — 16,33 Углеводы, г — 20,62",
                            Image = "https://mistertako.ru/uploads/products/663ab868-85ec-11ea-a9ab-86b1f8341741.jpg",
                            Name = "Wok а-ля Диаблo",
                            Price = 330.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("01b9209e-24b4-4118-b815-9723aa47403a"),
                            Category = "Wok",
                            Description = "Пшеничная лапша обжаренная на воке с фаршем (Говядина/свинина) и овощами (шампиньоны, перец сладкий, лук красный) в томатном соусе с добавлением чесночно–имбирной заправки и петрушки. БЖУ на 100 г. Белки, г — 8,07 Жиры, г — 15,38 Углеводы, г — 23,22",
                            Image = "https://mistertako.ru/uploads/products/663ab866-85ec-11ea-a9ab-86b1f8341741.jpg",
                            Name = "Wok болоньезе",
                            Price = 290.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("af1daefb-0c03-4600-9752-5fd56e6f3ab4"),
                            Category = "Wok",
                            Description = "Лапша пшеничная, куриное филе, шампиньоны, лук красный, заправка Том Ям (паста Том Ям, паста Том Кха, сахар, соевый соус), сливки, соевый соус, помидор, перец чили. БЖУ на 100 г. Белки, г - 7,05 Жиры, г - 12,92 Углеводы, г - 18,65",
                            Image = "https://mistertako.ru/uploads/products/a41bd9fd-54ed-11ed-8575-0050569dbef0.jpg",
                            Name = "Wok том ям с курицей",
                            Price = 280.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("35170a88-0fae-4ef5-bc12-9d7854fc5477"),
                            Category = "Wok",
                            Description = "Лапша пшеничная, креветки, кальмар, шампиньоны, лук красный, заправка Том Ям (паста Том Ям, паста Том Кха, сахар, соевый соус), сливки, соевый соус, помидор, перец чили. БЖУ на 100 г. Белки, г - 8,57 Жиры, г - 12,8 Углеводы, г - 18,8",
                            Image = "https://mistertako.ru/uploads/products/bacd88ca-54ed-11ed-8575-0050569dbef0.jpg",
                            Name = "Wok том ям с морепродуктами",
                            Price = 340.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("b6fa87bd-b8eb-4f33-9ded-b1bc66dea8b5"),
                            Category = "Wok",
                            Description = "Лапша пшеничная, шампиньоны, лук красный, заправка Том Ям (паста Том Ям, паста Том Кха, сахар, соевый соус), сливки, соевый соус, помидор, перец чили. БЖУ на 100 г. Белки, г - 5,32 Жиры, г - 14,89 Углеводы, г - 22,46",
                            Image = "https://mistertako.ru/uploads/products/cd661716-54ed-11ed-8575-0050569dbef0.jpg",
                            Name = "Wok том ям с овощами",
                            Price = 250.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("6f18b615-aab0-4482-bd1a-08638b8c8509"),
                            Category = "Pizza",
                            Description = "4 сыра: «Моцарелла», «Гауда», «Фета», «Дор-блю», сливочно-сырный соус, пряные травы",
                            Image = "https://mistertako.ru/uploads/products/77888c7e-8327-11ec-8575-0050569dbef0.",
                            Name = "4 сыра",
                            Price = 360.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("65952c14-454e-4129-8c0b-839e2bac498e"),
                            Category = "Pizza",
                            Description = "Бекон, соленый огурчик, брусника, сыр «Моцарелла», сыр «Гауда», соус BBQ",
                            Image = "https://mistertako.ru/uploads/products/839d0250-8327-11ec-8575-0050569dbef0.",
                            Name = "Party BBQ",
                            Price = 480.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("e5160ba6-c051-421c-be2e-d5ed470630fb"),
                            Category = "Pizza",
                            Description = "Копченая куриная грудка, свежие шампиньоны, маринованные опята, сыр «Моцарелла», сыр «Гауда», сливочно-чесночный соус, свежая зелень.",
                            Image = "https://mistertako.ru/uploads/products/9ee8ed49-8327-11ec-8575-0050569dbef0.",
                            Name = "Белиссимо",
                            Price = 400.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("cf26dec6-ad06-4ba7-b671-9e0e12028788"),
                            Category = "Soup",
                            Description = "Сырный бульон с пшеничной лапшой, отварным куриным филе, помидором и сырными шариками. БЖУ на 100 г. Белки, г — 11,8 Жиры, г — 9,82 Углеводы, г — 22,69",
                            Image = "https://mistertako.ru/uploads/products/ccd8e2de-5f36-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Рамен сырный",
                            Price = 300.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("d4d0c0a8-2293-484a-b129-8c759a896446"),
                            Category = "Soup",
                            Description = "Бульон рамен со сливками (куриный бульон, чесночно-имбирная заправка, соевый соус) с пшеничной лапшой, отварной курицей, омлетом Томаго и шампиньонами. БЖУ на 100 г. Белки, г — 8,13 Жиры, г — 6,18 Углеводы, г — 8,08",
                            Image = "https://mistertako.ru/uploads/products/ccd8e2de-5f36-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Сливочный рамен с курицей и шампиньонами",
                            Price = 260.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("e1a09a59-1a0c-4fe8-a2c7-08b058b9106b"),
                            Category = "Soup",
                            Description = "Знаменитый тайский острый суп со сливками, куриным филе, шампиньонами, красным луком, помидором, перчиком Чили и кинзой. Подается с рисом. БЖУ на 100 г. Белки, г — 5,75 Жиры, г — 3,72 Углеводы, г — 14,76",
                            Image = "https://mistertako.ru/uploads/products/ccd8e2de-5f36-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Том ям кай",
                            Price = 300.00m,
                            Rating = 0.0,
                            Vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("6d1d40b1-1e3c-4751-a602-3d452b83407e"),
                            Category = "Dessert",
                            Description = "Апельсин, банан, шоколадная крошка, сыр творожный, сырная лепешка. БЖУ на 100 г. Белки, г - 5,86 Жиры, г - 13,12 Углеводы, г - 44,05",
                            Image = "https://mistertako.ru/uploads/products/05391255-54ee-11ed-8575-0050569dbef0.jpg",
                            Name = "Сладкий ролл с апельсином и бананом",
                            Price = 250.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("1bf3eb95-bf69-4a1f-b74c-b8279b986ee1"),
                            Category = "Dessert",
                            Description = "Сырная лепешка, банан, арахис, сливочный сыр, шоколадная крошка, топинг карамельный",
                            Image = "https://mistertako.ru/uploads/products/a4772f7a-7a6f-11eb-850a-0050569dbef0.jpeg",
                            Name = "Сладкий ролл с арахисом и бананом",
                            Price = 210.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("8d5b037b-014a-4eb4-8e18-20825ab85f98"),
                            Category = "Dessert",
                            Description = "Сырная лепешка, банан, киви, сливочный сыр, топинг клубничный",
                            Image = "https://mistertako.ru/uploads/products/9e7c8581-7a6f-11eb-850a-0050569dbef0.jpeg",
                            Name = "Сладкий ролл с бананом и киви",
                            Price = 220.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("d795997a-4923-44ae-a2a5-609cab54c9d1"),
                            Category = "Dessert",
                            Description = "Чизкейк Нью-Йорк - настоящая классика. Его основа - сочетание вкусов нежнейшего сливочного сыра и тонкой песочной корочки.",
                            Image = "https://mistertako.ru/uploads/products/120b46b1-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Чизкейк Нью-Йорк",
                            Price = 210.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("fa56a0c6-6763-422d-8996-d78e21fe1abb"),
                            Category = "Drink",
                            Description = "Классический молочный коктейль",
                            Image = "https://mistertako.ru/uploads/products/120b46bc-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Коктейль классический",
                            Price = 140.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("6bbae1e3-659e-485d-afef-fa481619dbde"),
                            Category = "Drink",
                            Description = "Классический молочный коктейль с клубничным топпингом",
                            Image = "https://mistertako.ru/uploads/products/120b46bd-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Коктейль клубничный",
                            Price = 170.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("d978c82f-49d1-4727-b4a7-4521353af33f"),
                            Category = "Drink",
                            Description = "Классический молочный коктейль с добавлением шоколадного топпинга",
                            Image = "https://mistertako.ru/uploads/products/120b46be-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Коктейль шоколадный",
                            Price = 170.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("d33d79ab-4886-4fa8-8f3e-cff1f0a2e1e4"),
                            Category = "Drink",
                            Description = "Смородиновый морс",
                            Image = "https://mistertako.ru/uploads/products/120b46c1-5f32-11e8-8f7d-00155dd9fd01.jpg",
                            Name = "Морс cмородиновый",
                            Price = 90.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("fbce39a3-f2f9-4f12-ba05-2531474882cb"),
                            Category = "Drink",
                            Description = "Облепиха, имбирь, сахар",
                            Image = "https://mistertako.ru/uploads/products/5a7d58a5-879d-11eb-850a-0050569dbef0.jpg",
                            Name = "Морс облепиховый",
                            Price = 90.00m,
                            Rating = 0.0,
                            Vegetarian = true
                        });
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Dish.Raiting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Raitings");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Dish.UserTestedDish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TestedDishes");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Address")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.TokenInfo", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.User.Password", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("FoodOrderingWebsite.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Address")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
